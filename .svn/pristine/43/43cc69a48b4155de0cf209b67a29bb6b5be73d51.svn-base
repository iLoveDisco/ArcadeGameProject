import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;

public class Fygar extends Monster {
	private int fygarHeight = 53;
	private int fygarWidth = 53;
	private GameObjectHandler handler;
	protected boolean isFireInverted = false;
	protected boolean isFireVertical = false;
	protected int fireLength = 90;
	protected int fireWidth = 20;
	protected int fireTimer = 0;
	protected boolean fireOut;
	public Fygar(int x, int y, GameObjectHandler handler) {
		super(x, y, handler);
		this.height = fygarHeight;
		this.width = fygarWidth;
		this.hitBox = new Rectangle2D.Double(this.x, y, this.height, this.width);
		this.handler = handler;
		super.fireRect = new Rectangle2D.Double(hitBox.getCenterX(), hitBox.getCenterY(), fireLength, fireWidth);
	}

	@Override
	public void render(Graphics2D g2) {
		if (this.isGhost) {
			this.ghostMode();
			this.updatePosition(this.dx, this.dy);
			this.hitBox = new Rectangle2D.Double(this.x, this.y, this.height, this.width);
			g2.setColor(Color.WHITE);
			g2.fill(hitBox);
			this.checkForTunnelInGhost();
			return;
		}
		this.turnToGhost();
		this.checkIfHitRock();
		this.fireTime();
		this.updatePosition(this.dx, 0);
		this.hitBox = new Rectangle2D.Double(this.x, y, this.height, this.width);
		g2.setColor(Color.GREEN);
		g2.fill(hitBox);
		if (this.hitBox.intersects(this.handler.hero.pumpRect)) {
			this.dx = 0;
			this.fireOut = false;
			this.inflate();
		}
		if (this.dx < 0) {
			isFireInverted = true;
		}
		if (this.dx > 0) {
			isFireInverted = false;
		}
		if (this.fireOut) {
			if (!isFireInverted && !isFireVertical) {
				super.fireRect = new Rectangle2D.Double(hitBox.getCenterX() + (hitBox.getWidth() / 2),
						hitBox.getCenterY(), fireLength, fireWidth);
				g2.setColor(Color.RED);
				g2.fill(fireRect);
			}
			if (isFireInverted && !isFireVertical) {
				super.fireRect = new Rectangle2D.Double(hitBox.getCenterX() - fireLength - hitBox.getWidth() / 2,
						hitBox.getCenterY(), fireLength, fireWidth);
				g2.setColor(Color.RED);
				g2.fill(fireRect);
			}
		} else {
			super.fireRect.width = 0;
		}

	}


	public void checkIfHitRock() {
		for (int i = 0; i < handler.rocks.size(); i++) {
			Rock rock = handler.rocks.get(i);
			if (hitBox.intersects(rock.rect)) {
				this.die();
				return;
			}
		}
	}

	public void breathFire() {
		this.fireOut = true;
		this.dx = 0;
	}

	private void fireTime() {
		if (this.fireTimer >= 400) {
			this.fireOut = false;
			this.fireTimer = 0;
			if (isFireInverted) {
				this.dx = -1;
			} else {
				this.dx = 1;
			}
			return;
		}
		if (this.fireTimer >= 350) {
			this.breathFire();
			this.fireTimer++;
		} else {
			this.fireTimer++;
		}
	}

}
