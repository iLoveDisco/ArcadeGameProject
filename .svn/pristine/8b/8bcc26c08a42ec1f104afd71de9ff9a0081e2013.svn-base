import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;

public class Fygar extends Monster{
	private int fygarHeight = 53;
	private int fygarWidth = 53;
	private GameObjectHandler handler;
	public boolean fireOut;
	public Rectangle2D.Double fireRect;
	private boolean isFireInverted = false;
	private boolean isFireVertical = false;
	private int fireLength = 90;
	private int fireWidth = 20;
	private int fireTimer = 0;
	public Fygar(int x, int y, ID id, GameObjectHandler handler) {
		super(x, y, id, handler);
		this.hitBox = new Rectangle2D.Double(this.x, y, fygarHeight, fygarWidth);
		this.handler = handler;
		this.fireRect = new Rectangle2D.Double(hitBox.getCenterX() + hitBox.getWidth(), hitBox.getCenterY(), fireLength, fireWidth);
	}
	
	@Override
	public void render(Graphics2D g2) {
		if(this.isGhost){
			this.ghostMode();
			this.updatePosition(this.dx, this.dy);
			this.hitBox = new Rectangle2D.Double(this.x, this.y, fygarHeight, fygarWidth);
			g2.setColor(Color.WHITE);
			g2.fill(hitBox);
			this.checkForTunnelInGhost();
			return;
		}
		this.turnToGhost();
		this.checkIfHitRock();
		this.fireTime();
		this.updatePosition(this.dx, 0);
		this.hitBox = new Rectangle2D.Double(this.x, y, fygarHeight, fygarWidth);
		g2.setColor(Color.GREEN);
		g2.fill(hitBox);
		if(this.hitBox.intersects(this.handler.getHero().pumpRect)) {
			this.dx = 0;
			this.fireOut = false;
			this.inflate();
		}
		if(this.fygarHeight >= 83) {
			this.die();
		}
		if(this.dx < 0) {
			isFireInverted = true;
		}
		if(this.dx > 0) {
			isFireInverted = false;
		}
		if(this.fireOut) {
			if(!isFireInverted && !isFireVertical) {
				this.fireRect = new Rectangle2D.Double(hitBox.getCenterX() + (hitBox.getWidth() / 2), hitBox.getCenterY(), fireLength, fireWidth);
				g2.setColor(Color.RED);
				g2.fill(fireRect);
			}
			if(isFireInverted && !isFireVertical) {
				this.fireRect = new Rectangle2D.Double(hitBox.getCenterX() - fireLength - hitBox.getWidth() / 2, hitBox.getCenterY(), fireLength, fireWidth);
				g2.setColor(Color.RED);
				g2.fill(fireRect);
			}
		}
		else {
			this.fireRect.width = 0;
		}

	}
	
	public void inflate() {
		this.fygarHeight += 1;
		this.fygarWidth += 1;
	}
	
	public void checkIfHitRock() {
		for(int i = 0; i < handler.objects.size(); i++){
			GameObject object = handler.objects.get(i);
			if(object.getID().equals(ID.Rock)){
				Rock rock = (Rock) object;
				
				if(hitBox.intersects(rock.rect)){
					this.die();
					return;
				}
			}
		}
	}
	

	public void breathFire(){
		this.fireOut = true;
		this.dx = 0;
	}
	
	private void fireTime() {
		if(this.fireTimer >= 400) {
			this.fireOut = false;
			this.fireTimer = 0;
			if(isFireInverted) {
				this.dx = -1;
			}
			else {
				this.dx = 1;
			}
			return;
		} 
		if(this.fireTimer >= 350){
			this.breathFire();
			this.fireTimer++;
		}
		else {
			this.fireTimer++;
		}
	}
}

