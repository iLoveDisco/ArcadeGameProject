import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.util.Random;

public class Monster extends Character {

	private GameObjectHandler handler;
	public Rectangle2D.Double hitBox;
	protected int dx;
	protected int dy = 0;
	public boolean isGhost;
	protected double height;
	protected double width;
	public int startX;
	public int startY;
	public int startDX = 1;
	public int startDY = 0;
	protected Rectangle2D.Double fireRect;
	public boolean hasBeenInflated;
	private int dxBeforePump;
	public boolean ifMoveVertical;
	public int dxBeforeGhost ;
	
	public Monster(int x, int y, GameObjectHandler handler) {
		super(x, y, handler);
		this.handler = handler;
		this.dx = 1;
		this.startX = x;
		this.startY = y;
	
	}
	public void inflate() {
		this.hasBeenInflated = true;
		this.height += 1;
		this.width += 1;
	}
	public void deflate() {
		this.height -= .1;
		this.width -= .1;
	}

	@Override
	public boolean checkLegalMove(int dx, int dy) {
		//System.out.println(dx);
		int futureX = this.x + dx;
		int futureY = this.y + dy;
		if(this.ifMoveVertical){
			//System.out.println(this.ifMoveVertical);
			for (int i = 0; i < handler.dirts.size(); i++) {
				Dirt dirt = handler.dirts.get(i);
				if (((dirt.x == futureX + 53) && dirt.y == futureY) && dirt.isDug) {
					System.out.println("got here");
					this.ifMoveVertical = false;
					this.dy = 0;
					this.dx = this.dxBeforeGhost;
					return true;
					//System.out.println(dx);
				} 
				if (((dirt.x == futureX - 53) && dirt.y == futureY) && dirt.isDug) {
					System.out.println("got here2");
					this.ifMoveVertical = false;
					this.dy = 0;
					this.dx = -this.dxBeforeGhost;
					return true;
					//System.out.println(dx);
				} 
			}
		}
		
		int leftSide = this.x + 53;
		int rightSide = this.x - 53;
		
		int checkForBothSides = 0;
		
		for (int i = 0; i < handler.dirts.size(); i++) {
			Dirt dirt = handler.dirts.get(i);
			if (((dirt.x == futureX + (53 * dx)) && dirt.y == futureY) && !dirt.isDug) {
				this.ifMoveVertical = false;
				return false;
			} 
			if (((dirt.x == leftSide || dirt.x == rightSide) && dirt.y == futureY) && !dirt.isDug) {
				checkForBothSides++;
			} 
		}
		if(checkForBothSides > 1){
			this.ifMoveVertical = true;
			return true;
		}
		return true;
	}

	@Override
	public void updatePosition(int dx, int dy) {
		if (this.isGhost) {
			this.x += dx;
			this.y += dy;
			return;
		}
		if(this.height <= 53 && this.hasBeenInflated){
			this.dx = this.dxBeforePump;
			this.dxBeforePump = 0;
			this.hasBeenInflated = false;
		}
		if (this.checkLegalMove(dx, dy)) {
			if(this.ifMoveVertical){
				this.y -= 1;
				this.dy = -1;
				this.dx = 0;
				return;
			}
			this.x += dx;
			this.y += dy;
		}	
		else {
			this.dx *= -1;
		}
	}

	public void ghostMode() {
		int heroX = this.handler.hero.x;
		int heroY = this.handler.hero.y;
		if (this.x < heroX) {
			this.dx = 1;
		} else if (this.x == heroX) {
			this.dx = 0;
		} else {
			this.dx = -1;
		}

		if (this.y > heroY) {
			this.dy = -1;
		} else if (this.y == heroY) {
			this.dy = 0;
		} else {
			this.dy = 1;
		}
	}

	public void turnToGhost() {
		Random r = new Random();
		int randomInt = r.nextInt(1000);
		if (randomInt == 1) {
			this.dxBeforeGhost = this.dx;
			this.isGhost = true;
		}
	}

	public void checkForTunnelInGhost() {
		for (int i = 0; i < handler.dirts.size(); i++) {
			GameObject object = handler.dirts.get(i);
			Dirt d = handler.dirts.get(i);
			if (this.x == d.x && this.y == d.y && d.isDug) {
				this.isGhost = false;
				this.dx = this.dxBeforeGhost;
			}
		}
	}
	
	
	
	public void die() {
		this.shouldRemove = true;
		handler.points += 200;
	}

	@Override
	public void render(Graphics2D g2) {
		if (this.isGhost) {
			this.ghostMode();
			this.updatePosition(this.dx, this.dy);
			this.hitBox = new Rectangle2D.Double(this.x, this.y, this.height, this.width);
			g2.setColor(Color.WHITE);
			g2.fill(hitBox);
			this.checkForTunnelInGhost();
			return;
		}
		this.turnToGhost();
		this.updatePosition(this.dx, 0);
		this.hitBox = new Rectangle2D.Double(this.x, y, this.height, this.width);
		g2.fill(hitBox);

	}
	@Override
	void collideWith(GameObject other) {
		other.collideWithMonster(this);
		if(this.fireRect != null){
			other.collideWithFire(this.fireRect);
		}
	}

	@Override
	void collideWithDirt(Dirt thisDirt) {
		// TODO Auto-generated method stub.

	}

	@Override
	void collideWithHero(Hero hero) {
		hero.collideWithMonster(this);
	}

	@Override
	void collideWithMonster(Monster thisMonster) {
		// Does nothing

	}

	@Override
	void collideWithRock(Rock thisRock) {
		if (thisRock.rect.intersects(this.hitBox) && !this.isGhost) {
			this.shouldRemove = true;
		}

	}

	@Override
	void collideWithFire(Rectangle2D.Double fireRect) {
		//Does nothing
	}

	@Override
	void collideWithPump(Rectangle2D.Double pumpRect) {
		if (this.hitBox.intersects(pumpRect)) {
			if(this.dxBeforePump == 0){
				this.dxBeforePump = this.dx;
			}
			this.dx = 0;
			this.inflate();
		}
		if (this.height >= 83){
			this.die();
		}
		if(!this.hitBox.intersects(pumpRect) && this.height > 53){
			this.dx = 0;
			this.deflate();
		}
	}

	@Override
	void collideWithFruit(Fruit fruit) {
		// TODO Auto-generated method stub.

	}

}
