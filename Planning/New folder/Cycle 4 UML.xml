<diagram program="umletino" version="14.2"><zoom_level>10</zoom_level><help_text>Character
--

--
updatePos</help_text><element><id>UMLClass</id><coordinates><x>0</x><y>0</y><w>140</w><h>110</h></coordinates><panel_attributes>GameMain
--
SIZE: int;
running: boolean
--
render()
start()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>180</x><y>10</y><w>120</w><h>110</h></coordinates><panel_attributes>Level
--
currentLevel: int
numLevels: int
--
readFile()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>820</x><y>300</y><w>250</w><h>100</h></coordinates><panel_attributes>&lt;&lt;abstract&gt;&gt;
Character
--

--
updatePosition()
checkLegalMove()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>740</x><y>460</y><w>90</w><h>70</h></coordinates><panel_attributes>Dirt
--
Rectangle.2D
isDug: boolean
--
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>570</x><y>400</y><w>150</w><h>140</h></coordinates><panel_attributes>Rock
--
rect: Rectangle2D.Double
isDirtBeneath: boolean
fallTimer: int
hitDirt: boolean
--
fall()
die()
checkForFall()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>820</x><y>390</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;10;10;70</additional_attributes></element><element><id>Relation</id><coordinates><x>710</x><y>480</y><w>50</w><h>30</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>30;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>530</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;50;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>650</x><y>580</y><w>160</w><h>60</h></coordinates><panel_attributes>Fruit
--
rect: Rectangle2D.Double
--</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1030</x><y>470</y><w>180</w><h>280</h></coordinates><panel_attributes>&lt;&lt;abstract&gt;&gt;
Monster
--
health:int
hitBox: Rectangle2D.Double
isGhost: boolean
startX: int
startY: int
startDX: int
startDY: int
fireRect: Rectangle2D.Double
hasBeenInflated: boolean
dxBeforePump: int
dxBeforeGhost: int
--
pause()
ghostMode()
turnToGhost()
checkForTunnelInGhost()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1050</x><y>390</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>UMLClass</id><coordinates><x>970</x><y>790</y><w>110</w><h>80</h></coordinates><panel_attributes>Fygar
--
--
breathFire()
fireTime()</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1030</x><y>740</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;50</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1090</x><y>790</y><w>110</w><h>70</h></coordinates><panel_attributes>Pookas
--
--
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1100</x><y>740</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;50</additional_attributes></element><element><id>UMLClass</id><coordinates><x>840</x><y>470</y><w>170</w><h>210</h></coordinates><panel_attributes>Hero
--
image: BufferedImage
image2: BufferedImage
dx: int
dy: int
rect: Rectangle2D.Double
pumpRect: Rectangle2D.Double
--
pump()
moveLeft()
moveRight()
moveUp()
moveDown()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>860</x><y>390</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>130</x><y>50</y><w>70</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>50;10;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>70</x><y>150</y><w>110</w><h>90</h></coordinates><panel_attributes>Window
--
width:int
height:int
title:String
--

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>80</x><y>100</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;50;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>70</x><y>270</y><w>120</w><h>80</h></coordinates><panel_attributes>KeyListener
--
--
keyPressed()
keyReleased()
keyType()</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>100</x><y>230</y><w>30</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;40;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>110</x><y>100</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;10;10;50</additional_attributes></element><element><id>UMLClass</id><coordinates><x>650</x><y>0</y><w>270</w><h>280</h></coordinates><panel_attributes>&lt;&lt;abstract&gt;&gt;
GameObject
--
x: int
y: int
dx: int
dy: int
shouldRemove: boolean
BLOCKSIZE: int
--
render()
collideWith(GameObject other)
collideWithDirt(Dirt thisDirt)
collideWithHero(Hero hero)
collideWithMonster(Monster thisMonster)
collideWithRock(Rock thisRock)
collideWithFire(Rectangle2D.Double fireRect)
collideWithPump(Rectangle2D.Double pumpRect)
collideWithFruit(Fruit fruit)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>289</x><y>48</y><w>80</w><h>40</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-
</panel_attributes><additional_attributes>60;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>690</x><y>268</y><w>30</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;130</additional_attributes></element><element><id>Relation</id><coordinates><x>770</x><y>268</y><w>30</w><h>210</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;190</additional_attributes></element><element><id>Relation</id><coordinates><x>870</x><y>268</y><w>30</w><h>50</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;30</additional_attributes></element><element><id>UMLClass</id><coordinates><x>350</x><y>8</y><w>130</w><h>160</h></coordinates><panel_attributes>GameObjectHandler
--
fallenRocks: int
points: int
running: boolean
pause: boolean
lives: int
--
render()
handleCollisions()
createFruit()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>470</x><y>48</y><w>200</w><h>40</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-
m1=*</panel_attributes><additional_attributes>180;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>470</x><y>88</y><w>200</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;180;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>290</x><y>210</y><w>210</w><h>90</h></coordinates><panel_attributes>--Note--

Collisions are handled by
Double Dispatch and are not
illustrated in this UML</panel_attributes><additional_attributes></additional_attributes></element></diagram>